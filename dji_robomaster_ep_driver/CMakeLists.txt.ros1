cmake_minimum_required(VERSION 2.8.3)
project(dji_robomaster_ep_driver)

find_package(catkin REQUIRED COMPONENTS
             common_robotics_utilities
             geometry_msgs
             nav_msgs
             roscpp
             sensor_msgs
             std_msgs
             tf2_msgs
             message_generation)
find_package(Eigen3 REQUIRED)
set(Eigen3_INCLUDE_DIRS ${EIGEN3_INCLUDE_DIR})

## We don't depend on Drake, but we do use different build flags if present.
find_package(drake QUIET)

catkin_package(INCLUDE_DIRS
               include
               LIBRARIES
               ${PROJECT_NAME}
               CATKIN_DEPENDS
               common_robotics_utilities
               geometry_msgs
               nav_msgs
               roscpp
               sensor_msgs
               std_msgs
               tf2_msgs
               message_runtime
               DEPENDS
               Eigen3
               CFG_EXTRAS ${PROJECT_NAME}-extras.cmake)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(include SYSTEM ${catkin_INCLUDE_DIRS}
                                   ${Eigen3_INCLUDE_DIRS})

## Build options
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION ON)
cmake_policy(SET CMP0069 NEW)

add_compile_options(-std=c++11)
add_compile_options(-Wall)
add_compile_options(-Wextra)
add_compile_options(-Werror)
add_compile_options(-Wconversion)
add_compile_options(-Wshadow)
add_compile_options(-O3)
add_compile_options(-g)
add_compile_options(-Werror=non-virtual-dtor)
add_compile_options(-Wold-style-cast)
add_compile_options(-Wpessimizing-move)
add_compile_options(-Wuninitialized)

if(drake_FOUND)
    message(STATUS "Drake found, disabling -march=native")
else()
    message(STATUS "Drake NOT found, enabling -march=native")
    add_compile_options(-march=native)
endif()

add_definitions(-DDJI_ROBOMASTER_EP_DRIVER__SUPPORTED_ROS_VERSION=1)

## Interface library
add_library(${PROJECT_NAME}
            include/${PROJECT_NAME}/dji_robomaster_ep_driver.hpp
            include/${PROJECT_NAME}/joystick_controller_mappings.hpp
            src/${PROJECT_NAME}/dji_robomaster_ep_driver.cpp
            src/${PROJECT_NAME}/joystick_controller_mappings.cpp)
add_dependencies(${PROJECT_NAME}
                 ${${PROJECT_NAME}_EXPORTED_TARGETS}
                 ${catkin_EXPORTED_TARGETS})
target_link_libraries(${PROJECT_NAME} ${catkin_LIBRARIES})

## ROS driver node
add_executable(${PROJECT_NAME}_node
               src/dji_robomaster_ep_driver_node.ros1.cpp)
add_dependencies(${PROJECT_NAME}_node
                 ${${PROJECT_NAME}_EXPORTED_TARGETS}
                 ${catkin_EXPORTED_TARGETS})
target_link_libraries(${PROJECT_NAME}_node
                      ${PROJECT_NAME}
                      ${catkin_LIBRARIES})

## ROS joystick teleoperation node
add_executable(joystick_teleop_node
               src/joystick_teleop_node.ros1.cpp)
add_dependencies(joystick_teleop_node ${catkin_EXPORTED_TARGETS})
target_link_libraries(joystick_teleop_node ${PROJECT_NAME} ${catkin_LIBRARIES})

#############
## Install ##
#############

## Mark executables and/or libraries for installation
install(TARGETS
        ${PROJECT_NAME}
        ${PROJECT_NAME}_node
        joystick_teleop_node
  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

## Mark cpp header files for installation
install(DIRECTORY include/${PROJECT_NAME}/
  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
  FILES_MATCHING PATTERN "*.hpp"
  PATTERN ".svn" EXCLUDE
)
